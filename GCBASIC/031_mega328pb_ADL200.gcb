// A demonstration program for GCBASIC
// ---------------------------------------------------------------------------------
// This program demonstrates ADL2000 Monitor functionality
//
// @author  Evan Venn
// @licence GPL
// @version 1.0
// @date    17/04/2025
// ********************************************************************************

// Set microcontroller type and clock speed
    #chip  MEGA328PB, 16
    #option Explicit

// Define pin constants
    #Define LED     PORTB.5

// GLCD Configuration
    #include <glcd.h>
    #DEFINE GLCD_TYPE GLCD_TYPE_ILI9488
    #DEFINE ILI9488_HARDWARESPI
    #DEFINE HWSPIMODE MasterUltraFast

// GLCD Ports for ILI9488
    #DEFINE GLCD_SCK      PortB.5  
    #DEFINE GLCD_DO       PortB.3
    #DEFINE GLCD_DI       PortB.4
    #DEFINE GLCD_RST      PortB.1
    #DEFINE GLCD_DC       PortB.0
    #DEFINE GLCD_CS       PortB.2

// USART Configuration
    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

// USART Software Configuration
    // Include library
    #include <SoftSerial.h>

    // Config Serial UART :
    #define SER1_BAUD 9600      // baudrate must be defined
    // Config I/O ports for transmitting
    #define SER1_TXPORT PORTB   // I/O port (without .bit) must be defined
    #define SER1_TXPIN 1        // portbit  must be defined




//*************************** Main Program ***************************************

    #include "ADL200.h"

// Buffer management variables 
    Dim next_in As Byte
    Dim next_out As Byte
    Dim syncbyte As Byte
    Dim temppnt As Byte

// Buffer constants
    #DEFINE BUFFER_SIZE 8
    #DEFINE bkbhit (next_in <> next_out)

// Buffer array
    Dim buffer(BUFFER_SIZE - 1) // we will use element 0 in the array as part of our buffer

// String constant
    #DEFINE SYSDEFAULTCONCATSTRING 24

// Modbus state constants
    Enum ModbusState
        MODBUS_IDLE           ' Waiting for a new message
        MODBUS_SYNC           ' Sync with Modbus device address
        MODBUS_FUNCTION_CODE  ' Identify function code
        MODBUS_PROCESS_DATA   ' Read incoming data bytes
        MODBUS_COMPLETE       ' Packet processing finished
    End Enum

// Modbus variables
    Dim ModBusDeviceAddress, ModBusAddressesTorRead
    Dim ModBusRegisterAddress as Word
    Dim myModBusRequestArray(7) as Byte  
    Dim ModBusCC As Byte

// Data variables
    Dim mycurrenttotalactivenergyL, mycurrentforwaretotalenergyL as Long
    Dim myfrequencyW, myVoltageW, mycurrentW as Word
    Dim pulse as Byte

// Display position constants
    #DEFINE POS_PULSE_CIRCLEX 450
    #DEFINE POS_PULSE_CIRCLEY 98

// Modbus state machine variables
    Dim screenX, screenY, datacounter, dataPoint as Word
    Dim ModbusCacheValue as Long
    Dim synccode, inchar as Byte
    Dim inbufferstring as String * 8
    Dim logString as String * 16
    Dim ModbusCurrentState As Byte
    Dim ModbusByteCounter As Byte
    Dim ModbusTempHigh As Byte
    Dim ModbusTempLow As Byte
    Dim ModbusRegisterDataLength As Byte

// Initialize buffer ring
    InitBufferRing

// Initialize variables
    ModbusCurrentState = MODBUS_IDLE
    screenX = 0
    screenY = 100
    myfrequencyW = 0
    mycurrentW = 0
    datacounter = 1
    dataPoint = 1
    pulse = 0

// Display setup
    GLCDROTATE Landscape

    Box 0, 0, GLCDDeviceWidth-1, GLCDDeviceHeight-1, TFT_YELLOW
    Box 1, 1, GLCDDeviceWidth-2, GLCDDeviceHeight-2, TFT_YELLOW

    FilledBox (GLCDDeviceWidth/2) - 1, 20, (GLCDDeviceWidth/2) + 1, GLCDDeviceHeight, TFT_YELLOW
    Box 0, 0, GLCDDeviceWidth, 20, TFT_YELLOW

    GLCDPRINTLARGEFONT 138, 2, "ADL2000 Monitor", TFT_WHITE
    GLCDPRINTLARGEFONT 5, 30, "Active Metrics", ILI9488_TFT_GREEN
    GLCDPRINTLARGEFONT 15, 60, "Voltage"
    GLCDPRINTLARGEFONT 15, 80, "Frequency"

    Box (GLCDDeviceWidth/2)+10, 40, GLCDDeviceWidth - 10, GLCDDeviceHeight - 20, TFT_YELLOW
    FilledBox (GLCDDeviceWidth/2)+10, 40, (GLCDDeviceWidth - 10), 80, TFT_GREEN
    RoundRect (GLCDDeviceWidth/2)+20, 120, GLCDDeviceWidth - 20, GLCDDeviceHeight - 40, TFT_YELLOW

    GLCDPrintWithSize(280, 140, "V", 4)
    GLCDPrintWithSize(280, 180, "A", 4)
    GLCDPrintWithSize(280, 220, "F", 4)

// Main Loop
    Do
        ProcessModbusSerialData(ModbusCacheValue)

        // Update pulse indicator
        If pulse = 0 Then 
            FilledCircle POS_PULSE_CIRCLEX, POS_PULSE_CIRCLEY, 10, TFT_GREEN
        Else
            FilledCircle POS_PULSE_CIRCLEX, POS_PULSE_CIRCLEY, 10, GLCDBackGround
            Circle POS_PULSE_CIRCLEX, POS_PULSE_CIRCLEY, 9, TFT_RED
            ModbusCacheValue = 0
        End If

        pulse++

        // Display Modbus read status
        GLCDBackGround = TFT_GREEN
        GLCDPrint 320, 50, "CONSUME", TFT_BLACK
        GLCDBackGround = TFT_BLACK

        // Process and store Modbus data values
        Select Case ModBusRegisterAddress
            Case ADL200_CURRENT_TOTAL_ACTIVE_ENERGY
                mycurrenttotalactivenergyL = ModbusCacheValue
            Case ADL200_CURRENT_FORWARD_TOTAL_ENERGY
                mycurrentforwaretotalenergyL = ModbusCacheValue
            Case ADL200_FREQUENCY
                myfrequencyW = ModbusCacheValue
            Case ADL200_VOLTAGE
                myvoltageW = ModbusCacheValue
            Case ADL200_CURRENT
                mycurrentW = ModbusCacheValue
                SendCommand_ILI9488(ILI9488_CMD_DISPLAY_ON)  ' Turn on display when current data is received
        End Select

        // Display formatted values
        PrintFormattedValue(140, 60,  310, 140, myVoltageW, 10, 4, ILI9488_TFT_RED)
        PrintFormattedValue(0,   0,   310, 180, myCurrentW, 100, 4)
        PrintFormattedValue(140, 80,  310, 220, myfrequencyW, 100, 4, ILI9488_TFT_RED)
        PrintFormattedValue(140, 100, 0,   0,   mycurrenttotalactivenergyL, 100, 4, ILI9488_TFT_RED)
        PrintFormattedValue(140, 120, 0,   0,   mycurrentforwaretotalenergyL, 100, 4, ILI9488_TFT_RED)

        // Modbus data request cycle
        ModBusDeviceAddress = 1
        ModBusAddressesTorRead = 1

        // Determine next Modbus register to request data from
        ReadTable ADL200_readregisterssequence, DataPoint, ModBusRegisterAddress
     
        ModbusRegisterDataLength = ADL200_GetRegisterDataLength(ModBusRegisterAddress)
        If ModBusRegisterAddress = 0xFFFF Then 
            DataPoint = 1
        Else
            DataPoint++
        End If

        // Send Modbus request
        ModbusRequest(ModBusDeviceAddress, MODBUS_READ_HOLDING_REGS, ModBusRegisterAddress, ModBusAddressesTorRead, myModBusRequestArray())

        // Transmit Modbus request packet
        For ModBusCC = 0 To 7
            HSerSend myModBusRequestArray(ModBusCC)
        Next ModBusCC

        wait 25 ms  ' Small delay before next loop iteration
    Loop

// Modbus register sequence table
    Table ADL200_readregisterssequence as Word
        ADL200_FREQUENCY
        ADL200_VOLTAGE
        ADL200_CURRENT
        ADL200_TOTAL_ACTIVE_LAST_MONTH
        ADL200_CURRENT_FORWARD_TOTAL_ENERGY
        0xFFFF
    End Table

//*************************** Supporting Subroutines ***************************************

// Initialize the ring buffer and set up interrupt
    Sub InitBufferRing
        // Set the buffer to the first address
        next_in = 0
        next_out = 0
        On Interrupt UsartRX1Ready Call readUSART
    End Sub

// USART read interrupt handler
    Sub readUSART
        buffer(next_in) = HSerReceive
        temppnt = next_in
        next_in = (next_in + 1) % BUFFER_SIZE
        If (next_in = next_out) Then  // buffer is full!!
            next_in = temppnt
        End If
    End Sub

// Get a byte from the buffer
    Function bgetc
        Dim local_next_out as Byte    // maintain a local copy of the next_out variable to ensure it does not change when an Interrupt happens
        local_next_out = next_out
        bgetc = buffer(local_next_out)
        local_next_out = (local_next_out + 1) % BUFFER_SIZE
        INTOFF
        next_out = local_next_out
        INTON
    End Function

// Convert hexadecimal string to number
    Function HexStringToNumber(_HS2N_HexStr As String) As Long    
        // Local variables
        Dim _HS2N_CurrentChar As Byte       // Stores the current character being processed
        Dim _HS2N_CurrentCharCount As Byte  // Index for iteration through the hex string
        Dim _HS2N_HexStr As String * 4      // Ensures input string is exactly 4 characters long

        // Initialize return value
        HexStringToNumber = 0

        // Iterate through each character in the hex string
        For _HS2N_CurrentCharCount = 1 To _HS2N_HexStr(0)
            // Retrieve the current character
            _HS2N_CurrentChar = _HS2N_HexStr(_HS2N_CurrentCharCount)

            // Determine if character is a valid hexadecimal digit
            If _HS2N_CurrentChar >= "0" And _HS2N_CurrentChar <= "9" Then
                // Convert numeric characters ('0'-'9') to their integer values
                HexStringToNumber = HexStringToNumber Or Val(Chr(_HS2N_CurrentChar))  
            Else If _HS2N_CurrentChar >= "a" And _HS2N_CurrentChar <= "f" Then
                // Convert lowercase hex letters ('a'-'f') to their integer values
                HexStringToNumber = HexStringToNumber Or _HS2N_CurrentChar - 87
            Else If _HS2N_CurrentChar >= "A" And _HS2N_CurrentChar <= "F" Then
                // Convert uppercase hex letters ('A'-'F') to their integer values
                HexStringToNumber = HexStringToNumber Or _HS2N_CurrentChar - 55
            Else
                // If an invalid character is found, return 0 and exit
                HexStringToNumber = 0
                Exit Function
            End If

            // Shift bits left by 4 positions (equivalent to multiplying by 16) if not the last character
            If _HS2N_CurrentCharCount < _HS2N_HexStr(0) Then HexStringToNumber = HexStringToNumber << 4  
        Next
    End Function

// Format and print values at specified locations
    Sub PrintFormattedValue(PFV_PRINTLOCX1 As Word, PFV_PRINTLOCY1 As Word, PFV_PRINTLOCX2 As Word, PFV_PRINTLOCY2 As Word, _HS2N_value As Word, _HS2N_divisor As Word, _GLCDPrintSize As Word, Optional Color As Long = TFT_RED)
        Dim PrintData As String

        ' Default value if the number is zero
        PrintData = "0.0  "
        If _HS2N_value <> 0 Then
            ' Format value into a string with a decimal point
            PrintData = Str(_HS2N_value / _HS2N_divisor) + "."
            PrintData = PrintData + Mid(Str(_HS2N_value), Len(Str(_HS2N_value) + " ") - 1, 3)
        End If

        If PFV_PRINTLOCX1 <> 0 OR PFV_PRINTLOCY1 <> 0 Then
            ' Print the formatted value with large font at specified coordinates and color
            GLCDPRINTLARGEFONT PFV_PRINTLOCX1, PFV_PRINTLOCY1, PrintData, Color
        End If

        If PFV_PRINTLOCX2 <> 0 OR PFV_PRINTLOCY2 <> 0 Then
            ' Print the formatted value with specified font size and color at separate coordinates
            GLCDPrintWithSize(PFV_PRINTLOCX2, PFV_PRINTLOCY2, PrintData, _GLCDPrintSize)
        End If
    End Sub

// Process Modbus serial data using state machine
    Sub ProcessModbusSerialData(out ModbusCacheValue)
        Dim ModbusCacheValue as Long
        ModbusCacheValue = 0

        DO WHILE bkbhit
            Dim inchar As Byte
            inchar = bgetc

            ' State machine logic
            Select Case ModbusCurrentState
                Case MODBUS_IDLE
                    If inchar = ModBusDeviceAddress Then
                        Ser1Print "ModBusDeviceAddress" + str(ModBusDeviceAddress) 
                        ModbusCurrentState = MODBUS_SYNC
                    End If
                
                Case MODBUS_SYNC
                    If inchar = (MODBUS_READ_HOLDING_REGS AND 0x7F) Then 
                        ModbusCurrentState = MODBUS_PROCESS_DATA
                        ModbusByteCounter = 1
                    Else
                        ModbusCurrentState = MODBUS_IDLE
                    End If

                Case MODBUS_PROCESS_DATA
                    Select Case ModbusRegisterDataLength 
                        Case 1
                            Ser1Print " 1 "
                            Select Case ModbusByteCounter                    
                                Case 2
                                    ' Expected number of bytes in packet
                                Case 3
                                    [byte]ModbusCacheValue = inchar   ' Low byte of value
                                    ModbusCurrentState = MODBUS_COMPLETE
                                Case Else
                                    ModbusCurrentState = MODBUS_IDLE
                            End Select
                        Case 2 
                            Ser1Print " 2 "
                            Select Case ModbusByteCounter                    
                                Case 2
                                    ' Expected number of bytes in packet
                                Case 3
                                    ModbusCacheValue_H = inchar  ' High byte of value
                                Case 4
                                    [byte]ModbusCacheValue = inchar   ' Low byte of value
                                    ModbusCurrentState = MODBUS_COMPLETE
                                Case Else
                                    ModbusCurrentState = MODBUS_IDLE
                            End Select
                        Case 4
                            Ser1Print " 2 "
                            Select Case ModbusByteCounter                    
                                Case 2
                                    ' Expected number of bytes in packet
                                Case 3
                                    ModbusCacheValue_E = inchar  ' Highest byte of value
                                Case 4
                                    ModbusCacheValue_U = inchar  ' next highest byte of value
                                Case 5
                                    ModbusCacheValue_H = inchar  ' High byte of value
                                Case 6
                                    [byte]ModbusCacheValue = inchar   ' Low byte of value
                                    ModbusCurrentState = MODBUS_COMPLETE
                                Case Else
                                    ModbusCurrentState = MODBUS_IDLE
                            End Select
                    End Select                
                    ModbusByteCounter++
                Case MODBUS_COMPLETE
                    ' Store the final value and reset state
                    ModbusCurrentState = MODBUS_IDLE
                    Ser1Send 10
                    Ser1Send 13
            End Select
        Loop
    End Sub

// Get register data length based on register constant
    FUNCTION ADL200_GetRegisterDataLength(in ADL200_registerConstant) AS BYTE
        Dim ADL200_reg as Byte
        Dim ADL200_i, ADL200_i_Items as Byte

        READTABLE ADL200_REGISTER_FORMATS, 0, ADL200_i_Items

        For ADL200_i = 1 to ADL200_i_Items Step 2
            READTABLE ADL200_REGISTER_FORMATS, ADL200_i, ADL200_reg
            IF ADL200_reg = ADL200_registerConstant THEN
                READTABLE ADL200_REGISTER_FORMATS, ADL200_i + 1, ADL200_GetRegisterDataLength
                Exit Function
            End IF
        Next
        
        ADL200_GetRegisterDataLength = 0
    END FUNCTION
